/*
 * Opsgenie REST API
 *
 * Opsgenie OpenAPI Specification
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleRotationWithParent {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<TypeEm>,
    #[serde(rename = "length", skip_serializing_if = "Option::is_none")]
    pub length: Option<i32>,
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::Recipient>>,
    #[serde(rename = "timeRestriction", skip_serializing_if = "Option::is_none")]
    pub time_restriction: Option<Box<crate::models::TimeRestrictionInterval>>,
    #[serde(rename = "_parent", skip_serializing_if = "Option::is_none")]
    pub _parent: Option<Box<crate::models::ScheduleMeta>>,
}

impl ScheduleRotationWithParent {
    pub fn new() -> ScheduleRotationWithParent {
        ScheduleRotationWithParent {
            id: None,
            name: None,
            start_date: None,
            end_date: None,
            _type: None,
            length: None,
            participants: None,
            time_restriction: None,
            _parent: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEm {
    #[serde(rename = "daily")]
    Daily,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "hourly")]
    Hourly,
}

