/*
 * Opsgenie REST API
 *
 * Opsgenie OpenAPI Specification
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateScheduleRotationPayload {
    /// Name of rotation
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Defines a date time as an override start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// Defines a date time as an override end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// Type of rotation. May be one of 'daily', 'weekly' and 'hourly'
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<TypeEm>,
    /// Length of the rotation with default value 1
    #[serde(rename = "length", skip_serializing_if = "Option::is_none")]
    pub length: Option<i32>,
    /// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given.
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::Recipient>>,
    #[serde(rename = "timeRestriction", skip_serializing_if = "Option::is_none")]
    pub time_restriction: Option<Box<crate::models::TimeRestrictionInterval>>,
}

impl UpdateScheduleRotationPayload {
    pub fn new() -> UpdateScheduleRotationPayload {
        UpdateScheduleRotationPayload {
            name: None,
            start_date: None,
            end_date: None,
            _type: None,
            length: None,
            participants: None,
            time_restriction: None,
        }
    }
}

/// Type of rotation. May be one of 'daily', 'weekly' and 'hourly'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEm {
    #[serde(rename = "daily")]
    Daily,
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "hourly")]
    Hourly,
}

